version: 2

sources:
  - name: tlc_raw
    schema: raw
    tables:
      - name: yellow_trip_raw
        loaded_at_field: pickup_datetime
        freshness:
          warn_after: {count: 1, period: hour}
          error_after: {count: 24, period: hour}
      - name: green_trip_raw
        loaded_at_field: pickup_datetime
        freshness:
          warn_after: {count: 1, period: hour}
          error_after: {count: 24, period: hour}

models:
  - name: fct_green_cleansed
    description: |
      ## Green Taxi Trips Fact Table (Cleansed)
      
      Green taxis are authorized to pick up passengers in outer boroughs 
      and Manhattan above 96th Street. This table contains cleansed and 
      validated green taxi trip records.

      **Business Rules Applied**:
      - Pickup < Dropoff
      - Passenger count 1â€“8
      - Distance non-negative
      - Monetary amounts non-negative
      - VendorID in {1, 2}
      - TripType in {1, 2}
      - No future trips

    constraints:
      - type: primary_key
        columns: [green_id]
      - type: not_null
        columns: ['VendorID', 'pickup_datetime', 'dropoff_datetime', 'passenger_count']
      - type: check
        expression: "pickup_datetime < dropoff_datetime"
      - type: check
        expression: "fare_amount >= 0"
      - type: check
        expression: "total_amount >= fare_amount"

    columns:
      - name: green_id
        description: "Unique surrogate key for each green taxi trip record"
        data_type: varchar(32)
        tests:
          - unique
          - not_null

      - name: PULocationID
        tests:
          - not_null
          - relationships:
              to: ref('dim_taxi_zone_lookup')
              field: location_id

      - name: DOLocationID
        tests:
          - not_null
          - relationships:
              to: ref('dim_taxi_zone_lookup')
              field: location_id

      - name: VendorID
        description: "TPEP Provider (1=CMT, 2=VeriFone)"
        data_type: int
        tests:
          - not_null
          - relationships:
              to: ref('dim_vendor')
              field: vendor_id
          - accepted_values:
              values: [1, 2]

      - name: RatecodeID
        description: "Final rate code (1=Standard, 2=JFK, ... 6=Group, 99=Unknown)"
        data_type: int
        tests:
          - not_null
          - relationships:
              to: ref('dim_rate_code')
              field: rate_code_id
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 99]

      - name: payment_type_id
        description: "Payment type (1=Credit, 2=Cash, 3=No charge, 4=Dispute, 5=Unknown, 6=Voided)"
        data_type: int
        tests:
          - not_null
          - relationships:
              to: ref('dim_payment_type')
              field: payment_type_id
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6]

      - name: trip_type_id
        description: "Trip classification (1=Street-hail, 2=Dispatch)"
        data_type: int
        tests:
          - not_null
          - relationships:
              to: ref('dim_trip_type')
              field: trip_type_id
          - accepted_values:
              values: [1, 2]

      - name: pickup_datetime
        data_type: timestamp_ntz
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "pickup_datetime <= current_timestamp"

      - name: dropoff_datetime
        data_type: timestamp_ntz
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "dropoff_datetime <= current_timestamp"

      - name: passenger_count
        data_type: int
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 8

      - name: trip_distance
        data_type: number(8,2)
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100

      - name: fare_amount
        data_type: number(10,2)
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 10000

      - name: tip_amount
        data_type: number(10,2)
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0

      - name: tolls_amount
        data_type: number(10,2)
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0

      - name: extra
        data_type: number(10,2)

      - name: mta_tax
        data_type: number(10,2)

      - name: improvement_surcharge
        data_type: number(10,2)

      - name: congestion_surcharge
        data_type: number(10,2)

      - name: cbd_congestion_fee
        data_type: number(10,2)

      - name: total_amount
        data_type: number(10,2)
        tests:
          - not_null
          - dbt_utils.expression_is_true:
              expression: "ABS(total_amount - (fare_amount + tip_amount + tolls_amount + extra + mta_tax + improvement_surcharge + congestion_surcharge + cbd_congestion_fee)) < 0.01"

      - name: store_and_fwd_flag
        data_type: varchar(1)
        tests:
          - accepted_values:
              values: ['Y', 'N']

  - name: fct_yellow_cleansed
    description: "Cleansed Yellow Taxi Trip Data"
    constraints:
      - type: primary_key
        columns: [yellow_id]

    columns:
      - name: yellow_id
        tests:
          - unique
          - not_null

      - name: PULocationID
        tests:
          - not_null
          - relationships:
              to: ref('dim_taxi_zone_lookup')
              field: location_id

      - name: DOLocationID
        tests:
          - not_null
          - relationships:
              to: ref('dim_taxi_zone_lookup')
              field: location_id

      - name: VendorID
        tests:
          - not_null
          - relationships:
              to: ref('dim_vendor')
              field: vendor_id
          - accepted_values:
              values: [1, 2]

      - name: RatecodeID
        tests:
          - not_null
          - relationships:
              to: ref('dim_rate_code')
              field: rate_code_id
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6, 99]

      - name: payment_type_id
        tests:
          - not_null
          - relationships:
              to: ref('dim_payment_type')
              field: payment_type_id
          - accepted_values:
              values: [1, 2, 3, 4, 5, 6]

      - name: pickup_datetime
        tests:
          - not_null
          - expression_is_true:
              column_name: pickup_datetime
              expression: "pickup_datetime <= current_timestamp"

      - name: dropoff_datetime
        tests:
          - not_null
          - expression_is_true:
              column_name: dropoff_datetime
              expression: "dropoff_datetime <= current_timestamp"

      - name: passenger_count
        tests:
          - not_null
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 1
              max_value: 8

      - name: trip_distance
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 100

      - name: fare_amount
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0
              max_value: 5000

      - name: tip_amount
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0

      - name: tolls_amount
        tests:
          - dbt_expectations.expect_column_values_to_be_between:
              min_value: 0

      - name: total_amount
        tests:
          - not_null
          - expression_is_true:
              column_name: total_amount
              expression: "ABS(total_amount - (fare_amount + tip_amount + tolls_amount + extra + mta_tax + improvement_surcharge + congestion_surcharge + cbd_congestion_fee + COALESCE(Airport_fee,0))) < 0.01"

      - name: store_and_fwd_flag
        tests:
          - accepted_values:
              values: ['Y', 'N']
